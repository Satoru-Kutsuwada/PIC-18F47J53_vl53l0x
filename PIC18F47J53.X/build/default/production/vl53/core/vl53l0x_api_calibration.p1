Version 4.0 HI-TECH Software Intermediate Code
"240 ./vl53/core\vl53l0x_def.h
[s S3 `ul -> 7 `i `ul -> 7 `i ]
[n S3 . ambRate_mcps dmax_mm ]
"249
[s S4 `uc 1 `uc 1 `ul 1 `ul 1 `uc 1 `us 1 `ul 1 `l 1 `uc -> 6 `i `uc -> 6 `i `ul -> 6 `i `S3 1 `uc 1 ]
[n S4 . DeviceMode HistogramMode MeasurementTimingBudgetMicroSeconds InterMeasurementPeriodMilliSeconds XTalkCompensationEnable XTalkCompensationRangeMilliMeter XTalkCompensationRateMegaCps RangeOffsetMicroMeters LimitChecksEnable LimitChecksStatus LimitChecksValue dmax_lut WrapAroundCheckEnable ]
"322
[s S5 `ul 1 `ul 1 `us 1 `us 1 `ul 1 `ul 1 `us 1 `uc 1 `uc 1 `uc 1 ]
[n S5 . TimeStamp MeasurementTimeUsec RangeMilliMeter RangeDMaxMilliMeter SignalRateRtnMegaCps AmbientRateRtnMegaCps EffectiveSpadRtnCount ZoneId RangeFractionalPart RangeStatus ]
"376
[s S6 `ul -> 24 `i `uc 1 `uc 1 `uc 1 `uc 1 ]
[n S6 . HistogramData FirstBin BufferSize NumberOfBins ErrorStatus ]
"407
[s S8 `ul 1 `us 1 `uc 1 `ul 1 `uc 1 `ul 1 `uc 1 `us 1 `us 1 `us 1 `uc 1 `uc 1 `uc 1 `uc -> 32 `i `uc 1 `uc 1 `uc 1 `ul 1 `ul 1 `ul 1 ]
[n S8 . OscFrequencyMHz LastEncodedTimeout Pin0GpioFunctionality FinalRangeTimeoutMicroSecs FinalRangeVcselPulsePeriod PreRangeTimeoutMicroSecs PreRangeVcselPulsePeriod SigmaEstRefArray SigmaEstEffPulseWidth SigmaEstEffAmbWidth ReadDataFromDeviceDone ModuleId Revision ProductId ReferenceSpadCount ReferenceSpadType RefSpadsInitialised PartUIDUpper PartUIDLower SignalRateMeasFixed400mm ]
"400
[s S7 `uc -> 6 `i `uc -> 6 `i ]
[n S7 . RefSpadEnables RefGoodSpadMap ]
"461
[s S9 `l 1 `l 1 `S4 1 `S5 1 `S6 1 `S8 1 `S7 1 `uc 1 `uc 1 `uc 1 `uc 1 `us 1 `us 1 `us 1 `uc 1 `us 1 `ul 1 `ul 1 `ul 1 `*uc 1 `uc 1 `us 1 ]
[n S9 . Part2PartOffsetNVMMicroMeter Part2PartOffsetAdjustmentNVMMicroMeter CurrentParameters LastRangeMeasure LastHistogramMeasure DeviceSpecificParameters SpadData SequenceConfig RangeFractionalEnable PalState PowerMode SigmaEstRefArray SigmaEstEffPulseWidth SigmaEstEffAmbWidth StopVariable targetRefRate SigmaEstimate SignalEstimate LastSignalRefMcps pTuningSettingsPointer UseInternalTuningSettings LinearityCorrectiveGain ]
"58 ./vl53/platform\vl53l0x_platform.h
[; ;./vl53/platform\vl53l0x_platform.h: 58: typedef struct {
[s S14 `S9 1 `uc 1 ]
[n S14 . Data I2cDevAddr ]
"189
[; ;./vl53/platform\vl53l0x_platform.h: 189: VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data);
[v _VL53L0X_RdWord `(c ~T0 @X0 0 ef3`*S14`uc`*us ]
"128
[; ;./vl53/platform\vl53l0x_platform.h: 128: VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count);
[v _VL53L0X_WriteMulti `(c ~T0 @X0 0 ef4`*S14`uc`*uc`ul ]
"139
[; ;./vl53/platform\vl53l0x_platform.h: 139: VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count);
[v _VL53L0X_ReadMulti `(c ~T0 @X0 0 ef4`*S14`uc`*uc`ul ]
"149
[; ;./vl53/platform\vl53l0x_platform.h: 149: VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data);
[v _VL53L0X_WrByte `(c ~T0 @X0 0 ef3`*S14`uc`uc ]
"1519 ./vl53/core/vl53l0x_api.h
[; ;./vl53/core/vl53l0x_api.h: 1519:             VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(
[v _VL53L0X_PerformSingleRangingMeasurement `(c ~T0 @X0 0 ef2`*S14`*S5 ]
"55 vl53/core/vl53l0x_api_calibration.c
[; ;vl53/core/vl53l0x_api_calibration.c: 55: VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
[v _VL53L0X_perform_ref_calibration `(c ~T0 @X0 0 ef4`*S14`*uc`*uc`uc ]
"27 C:\Program Files\Microchip\xc8\v2.41\pic\include\c99\string.h
[; ;C:\Program Files\Microchip\xc8\v2.41\pic\include\c99\string.h: 27: void *memcpy (void *restrict, const void *restrict, size_t);
[v _memcpy `(*v ~T0 @X0 0 ef3`*v`*Cv`ui ]
"62 C:\Program Files\Microchip\xc8\v2.41\pic\include\c99\stdlib.h
[; ;C:\Program Files\Microchip\xc8\v2.41\pic\include\c99\stdlib.h: 62: int abs (int);
[v _abs `(i ~T0 @X0 0 ef1`i ]
"61 vl53/core/vl53l0x_api_calibration.c
[; ;vl53/core/vl53l0x_api_calibration.c: 61: VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev);
[v _VL53L0X_measurement_poll_for_completion `(c ~T0 @X0 0 ef1`*S14 ]
"1740 ./vl53/core/vl53l0x_api.h
[; ;./vl53/core/vl53l0x_api.h: 1740:             VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
[v _VL53L0X_ClearInterruptMask `(c ~T0 @X0 0 ef2`*S14`ul ]
"179 ./vl53/platform\vl53l0x_platform.h
[; ;./vl53/platform\vl53l0x_platform.h: 179: VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data);
[v _VL53L0X_RdByte `(c ~T0 @X0 0 ef3`*S14`uc`*uc ]
"213
[; ;./vl53/platform\vl53l0x_platform.h: 213: VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData);
[v _VL53L0X_UpdateByte `(c ~T0 @X0 0 ef4`*S14`uc`uc`uc ]
"52 vl53/core/vl53l0x_api_calibration.c
[; ;vl53/core/vl53l0x_api_calibration.c: 52: uint32_t refArrayQuadrants[4] = {10, 5,
[v _refArrayQuadrants `ul ~T0 @X0 -> 4 `i e ]
[i _refArrayQuadrants
:U ..
-> -> -> 10 `i `l `ul
-> -> -> 5 `i `l `ul
-> -> -> 0 `i `l `ul
-> -> -> 5 `i `l `ul
..
]
"346
[; ;vl53/core/vl53l0x_api_calibration.c: 346: VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
[v _VL53L0X_get_offset_calibration_data_micro_meter `(c ~T0 @X0 1 ef2`*S14`*l ]
"348
[; ;vl53/core/vl53l0x_api_calibration.c: 348: {
{
[e :U _VL53L0X_get_offset_calibration_data_micro_meter ]
"346
[; ;vl53/core/vl53l0x_api_calibration.c: 346: VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
[v _Dev `*S14 ~T0 @X0 1 r1 ]
"347
[; ;vl53/core/vl53l0x_api_calibration.c: 347:   int32_t *pOffsetCalibrationDataMicroMeter)
[v _pOffsetCalibrationDataMicroMeter `*l ~T0 @X0 1 r2 ]
"348
[; ;vl53/core/vl53l0x_api_calibration.c: 348: {
[f ]
"349
[; ;vl53/core/vl53l0x_api_calibration.c: 349:  VL53L0X_Error Status = ((VL53L0X_Error) 0);
[v _Status `c ~T0 @X0 1 a ]
[e = _Status -> -> 0 `i `c ]
"350
[; ;vl53/core/vl53l0x_api_calibration.c: 350:  uint16_t RangeOffsetRegister;
[v _RangeOffsetRegister `us ~T0 @X0 1 a ]
"351
[; ;vl53/core/vl53l0x_api_calibration.c: 351:  int16_t cMaxOffset = 2047;
[v _cMaxOffset `s ~T0 @X0 1 a ]
[e = _cMaxOffset -> -> 2047 `i `s ]
"352
[; ;vl53/core/vl53l0x_api_calibration.c: 352:  int16_t cOffsetRange = 4096;
[v _cOffsetRange `s ~T0 @X0 1 a ]
[e = _cOffsetRange -> -> 4096 `i `s ]
"356
[; ;vl53/core/vl53l0x_api_calibration.c: 356:  Status = VL53L0X_RdWord(Dev,
[e = _Status ( _VL53L0X_RdWord (3 , , _Dev -> -> 40 `i `uc &U _RangeOffsetRegister ]
"360
[; ;vl53/core/vl53l0x_api_calibration.c: 360:  if (Status == ((VL53L0X_Error) 0)) {
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 21  ]
{
"361
[; ;vl53/core/vl53l0x_api_calibration.c: 361:   RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
[e = _RangeOffsetRegister -> & -> _RangeOffsetRegister `ui -> -> 4095 `i `ui `us ]
"364
[; ;vl53/core/vl53l0x_api_calibration.c: 364:   if (RangeOffsetRegister > cMaxOffset)
[e $ ! > -> _RangeOffsetRegister `ui -> _cMaxOffset `ui 22  ]
"365
[; ;vl53/core/vl53l0x_api_calibration.c: 365:    *pOffsetCalibrationDataMicroMeter =
[e = *U _pOffsetCalibrationDataMicroMeter -> * -> -> - -> _RangeOffsetRegister `ui -> _cOffsetRange `ui `s `i -> 250 `i `l ]
[e $U 23  ]
"368
[; ;vl53/core/vl53l0x_api_calibration.c: 368:   else
[e :U 22 ]
"369
[; ;vl53/core/vl53l0x_api_calibration.c: 369:    *pOffsetCalibrationDataMicroMeter =
[e = *U _pOffsetCalibrationDataMicroMeter -> * -> -> _RangeOffsetRegister `s `i -> 250 `i `l ]
[e :U 23 ]
"372
[; ;vl53/core/vl53l0x_api_calibration.c: 372:  }
}
[e :U 21 ]
"374
[; ;vl53/core/vl53l0x_api_calibration.c: 374:  return Status;
[e ) _Status ]
[e $UE 20  ]
"375
[; ;vl53/core/vl53l0x_api_calibration.c: 375: }
[e :UE 20 ]
}
"420
[; ;vl53/core/vl53l0x_api_calibration.c: 420: void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
[v _get_next_good_spad `(v ~T0 @X0 1 ef4`*uc`ul`ul`*l ]
"422
[; ;vl53/core/vl53l0x_api_calibration.c: 422: {
{
[e :U _get_next_good_spad ]
"420
[; ;vl53/core/vl53l0x_api_calibration.c: 420: void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
[v _goodSpadArray `*uc ~T0 @X0 1 r1 ]
[v _size `ul ~T0 @X0 1 r2 ]
"421
[; ;vl53/core/vl53l0x_api_calibration.c: 421:    uint32_t curr, int32_t *next)
[v _curr `ul ~T0 @X0 1 r3 ]
[v _next `*l ~T0 @X0 1 r4 ]
"422
[; ;vl53/core/vl53l0x_api_calibration.c: 422: {
[f ]
"423
[; ;vl53/core/vl53l0x_api_calibration.c: 423:  uint32_t startIndex;
[v _startIndex `ul ~T0 @X0 1 a ]
"424
[; ;vl53/core/vl53l0x_api_calibration.c: 424:  uint32_t fineOffset;
[v _fineOffset `ul ~T0 @X0 1 a ]
"425
[; ;vl53/core/vl53l0x_api_calibration.c: 425:  uint32_t cSpadsPerByte = 8;
[v _cSpadsPerByte `ul ~T0 @X0 1 a ]
[e = _cSpadsPerByte -> -> -> 8 `i `l `ul ]
"426
[; ;vl53/core/vl53l0x_api_calibration.c: 426:  uint32_t coarseIndex;
[v _coarseIndex `ul ~T0 @X0 1 a ]
"427
[; ;vl53/core/vl53l0x_api_calibration.c: 427:  uint32_t fineIndex;
[v _fineIndex `ul ~T0 @X0 1 a ]
"428
[; ;vl53/core/vl53l0x_api_calibration.c: 428:  uint8_t dataByte;
[v _dataByte `uc ~T0 @X0 1 a ]
"429
[; ;vl53/core/vl53l0x_api_calibration.c: 429:  uint8_t success = 0;
[v _success `uc ~T0 @X0 1 a ]
[e = _success -> -> 0 `i `uc ]
"439
[; ;vl53/core/vl53l0x_api_calibration.c: 439:  *next = -1;
[e = *U _next -> -U -> 1 `i `l ]
"441
[; ;vl53/core/vl53l0x_api_calibration.c: 441:  startIndex = curr / cSpadsPerByte;
[e = _startIndex / _curr _cSpadsPerByte ]
"442
[; ;vl53/core/vl53l0x_api_calibration.c: 442:  fineOffset = curr % cSpadsPerByte;
[e = _fineOffset % _curr _cSpadsPerByte ]
"444
[; ;vl53/core/vl53l0x_api_calibration.c: 444:  for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
{
[e = _coarseIndex _startIndex ]
[e $U 28  ]
[e :U 25 ]
"445
[; ;vl53/core/vl53l0x_api_calibration.c: 445:     coarseIndex++) {
{
"446
[; ;vl53/core/vl53l0x_api_calibration.c: 446:   fineIndex = 0;
[e = _fineIndex -> -> -> 0 `i `l `ul ]
"447
[; ;vl53/core/vl53l0x_api_calibration.c: 447:   dataByte = goodSpadArray[coarseIndex];
[e = _dataByte *U + _goodSpadArray * -> _coarseIndex `ux -> -> # *U _goodSpadArray `ui `ux ]
"449
[; ;vl53/core/vl53l0x_api_calibration.c: 449:   if (coarseIndex == startIndex) {
[e $ ! == _coarseIndex _startIndex 29  ]
{
"453
[; ;vl53/core/vl53l0x_api_calibration.c: 453:    dataByte >>= fineOffset;
[e =>> _dataByte -> _fineOffset `uc ]
"454
[; ;vl53/core/vl53l0x_api_calibration.c: 454:    fineIndex = fineOffset;
[e = _fineIndex _fineOffset ]
"455
[; ;vl53/core/vl53l0x_api_calibration.c: 455:   }
}
[e :U 29 ]
"457
[; ;vl53/core/vl53l0x_api_calibration.c: 457:   while (fineIndex < cSpadsPerByte) {
[e $U 30  ]
[e :U 31 ]
{
"458
[; ;vl53/core/vl53l0x_api_calibration.c: 458:    if ((dataByte & 0x1) == 1) {
[e $ ! == & -> _dataByte `i -> 1 `i -> 1 `i 33  ]
{
"459
[; ;vl53/core/vl53l0x_api_calibration.c: 459:     success = 1;
[e = _success -> -> 1 `i `uc ]
"460
[; ;vl53/core/vl53l0x_api_calibration.c: 460:     *next = coarseIndex * cSpadsPerByte + fineIndex;
[e = *U _next -> + * _coarseIndex _cSpadsPerByte _fineIndex `l ]
"461
[; ;vl53/core/vl53l0x_api_calibration.c: 461:     break;
[e $U 32  ]
"462
[; ;vl53/core/vl53l0x_api_calibration.c: 462:    }
}
[e :U 33 ]
"463
[; ;vl53/core/vl53l0x_api_calibration.c: 463:    dataByte >>= 1;
[e =>> _dataByte -> -> 1 `i `uc ]
"464
[; ;vl53/core/vl53l0x_api_calibration.c: 464:    fineIndex++;
[e ++ _fineIndex -> -> -> 1 `i `l `ul ]
"465
[; ;vl53/core/vl53l0x_api_calibration.c: 465:   }
}
[e :U 30 ]
"457
[; ;vl53/core/vl53l0x_api_calibration.c: 457:   while (fineIndex < cSpadsPerByte) {
[e $ < _fineIndex _cSpadsPerByte 31  ]
[e :U 32 ]
"466
[; ;vl53/core/vl53l0x_api_calibration.c: 466:  }
}
[e ++ _coarseIndex -> -> -> 1 `i `l `ul ]
[e :U 28 ]
[e $ && < _coarseIndex _size ! != -> _success `i -> 0 `i 25  ]
[e :U 26 ]
}
"467
[; ;vl53/core/vl53l0x_api_calibration.c: 467: }
[e :UE 24 ]
}
"470
[; ;vl53/core/vl53l0x_api_calibration.c: 470: uint8_t is_aperture(uint32_t spadIndex)
[v _is_aperture `(uc ~T0 @X0 1 ef1`ul ]
"471
[; ;vl53/core/vl53l0x_api_calibration.c: 471: {
{
[e :U _is_aperture ]
"470
[; ;vl53/core/vl53l0x_api_calibration.c: 470: uint8_t is_aperture(uint32_t spadIndex)
[v _spadIndex `ul ~T0 @X0 1 r1 ]
"471
[; ;vl53/core/vl53l0x_api_calibration.c: 471: {
[f ]
"476
[; ;vl53/core/vl53l0x_api_calibration.c: 476:  uint32_t quadrant;
[v _quadrant `ul ~T0 @X0 1 a ]
"477
[; ;vl53/core/vl53l0x_api_calibration.c: 477:  uint8_t isAperture = 1;
[v _isAperture `uc ~T0 @X0 1 a ]
[e = _isAperture -> -> 1 `i `uc ]
"479
[; ;vl53/core/vl53l0x_api_calibration.c: 479:  quadrant = spadIndex >> 6;
[e = _quadrant >> _spadIndex -> 6 `i ]
"480
[; ;vl53/core/vl53l0x_api_calibration.c: 480:  if (refArrayQuadrants[quadrant] == 0)
[e $ ! == *U + &U _refArrayQuadrants * -> _quadrant `ux -> -> # *U &U _refArrayQuadrants `ui `ux -> -> -> 0 `i `l `ul 35  ]
"481
[; ;vl53/core/vl53l0x_api_calibration.c: 481:   isAperture = 0;
[e = _isAperture -> -> 0 `i `uc ]
[e :U 35 ]
"483
[; ;vl53/core/vl53l0x_api_calibration.c: 483:  return isAperture;
[e ) _isAperture ]
[e $UE 34  ]
"484
[; ;vl53/core/vl53l0x_api_calibration.c: 484: }
[e :UE 34 ]
}
"487
[; ;vl53/core/vl53l0x_api_calibration.c: 487: VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
[v _enable_spad_bit `(c ~T0 @X0 1 ef3`*uc`ul`ul ]
"489
[; ;vl53/core/vl53l0x_api_calibration.c: 489: {
{
[e :U _enable_spad_bit ]
"487
[; ;vl53/core/vl53l0x_api_calibration.c: 487: VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
[v _spadArray `*uc ~T0 @X0 1 r1 ]
[v _size `ul ~T0 @X0 1 r2 ]
"488
[; ;vl53/core/vl53l0x_api_calibration.c: 488:  uint32_t spadIndex)
[v _spadIndex `ul ~T0 @X0 1 r3 ]
"489
[; ;vl53/core/vl53l0x_api_calibration.c: 489: {
[f ]
"490
[; ;vl53/core/vl53l0x_api_calibration.c: 490:  VL53L0X_Error status = ((VL53L0X_Error) 0);
[v _status `c ~T0 @X0 1 a ]
[e = _status -> -> 0 `i `c ]
"491
[; ;vl53/core/vl53l0x_api_calibration.c: 491:  uint32_t cSpadsPerByte = 8;
[v _cSpadsPerByte `ul ~T0 @X0 1 a ]
[e = _cSpadsPerByte -> -> -> 8 `i `l `ul ]
"492
[; ;vl53/core/vl53l0x_api_calibration.c: 492:  uint32_t coarseIndex;
[v _coarseIndex `ul ~T0 @X0 1 a ]
"493
[; ;vl53/core/vl53l0x_api_calibration.c: 493:  uint32_t fineIndex;
[v _fineIndex `ul ~T0 @X0 1 a ]
"495
[; ;vl53/core/vl53l0x_api_calibration.c: 495:  coarseIndex = spadIndex / cSpadsPerByte;
[e = _coarseIndex / _spadIndex _cSpadsPerByte ]
"496
[; ;vl53/core/vl53l0x_api_calibration.c: 496:  fineIndex = spadIndex % cSpadsPerByte;
[e = _fineIndex % _spadIndex _cSpadsPerByte ]
"497
[; ;vl53/core/vl53l0x_api_calibration.c: 497:  if (coarseIndex >= size)
[e $ ! >= _coarseIndex _size 37  ]
"498
[; ;vl53/core/vl53l0x_api_calibration.c: 498:   status = ((VL53L0X_Error) - 50);
[e = _status -> -U -> 50 `i `c ]
[e $U 38  ]
"499
[; ;vl53/core/vl53l0x_api_calibration.c: 499:  else
[e :U 37 ]
"500
[; ;vl53/core/vl53l0x_api_calibration.c: 500:   spadArray[coarseIndex] |= (1 << fineIndex);
[e =| *U + _spadArray * -> _coarseIndex `ux -> -> # *U _spadArray `ui `ux -> << -> 1 `i _fineIndex `uc ]
[e :U 38 ]
"502
[; ;vl53/core/vl53l0x_api_calibration.c: 502:  return status;
[e ) _status ]
[e $UE 36  ]
"503
[; ;vl53/core/vl53l0x_api_calibration.c: 503: }
[e :UE 36 ]
}
"566
[; ;vl53/core/vl53l0x_api_calibration.c: 566: VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
[v _set_ref_spad_map `(c ~T0 @X0 1 ef2`*S14`*uc ]
"567
[; ;vl53/core/vl53l0x_api_calibration.c: 567: {
{
[e :U _set_ref_spad_map ]
"566
[; ;vl53/core/vl53l0x_api_calibration.c: 566: VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
[v _Dev `*S14 ~T0 @X0 1 r1 ]
[v _refSpadArray `*uc ~T0 @X0 1 r2 ]
"567
[; ;vl53/core/vl53l0x_api_calibration.c: 567: {
[f ]
"568
[; ;vl53/core/vl53l0x_api_calibration.c: 568:  VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
[v _status `c ~T0 @X0 1 a ]
[e = _status ( _VL53L0X_WriteMulti (4 , , , _Dev -> -> 176 `i `uc _refSpadArray -> -> -> 6 `i `l `ul ]
"571
[; ;vl53/core/vl53l0x_api_calibration.c: 571:  return status;
[e ) _status ]
[e $UE 39  ]
"572
[; ;vl53/core/vl53l0x_api_calibration.c: 572: }
[e :UE 39 ]
}
"575
[; ;vl53/core/vl53l0x_api_calibration.c: 575: VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
[v _get_ref_spad_map `(c ~T0 @X0 1 ef2`*S14`*uc ]
"576
[; ;vl53/core/vl53l0x_api_calibration.c: 576: {
{
[e :U _get_ref_spad_map ]
"575
[; ;vl53/core/vl53l0x_api_calibration.c: 575: VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
[v _Dev `*S14 ~T0 @X0 1 r1 ]
[v _refSpadArray `*uc ~T0 @X0 1 r2 ]
"576
[; ;vl53/core/vl53l0x_api_calibration.c: 576: {
[f ]
"577
[; ;vl53/core/vl53l0x_api_calibration.c: 577:  VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
[v _status `c ~T0 @X0 1 a ]
[e = _status ( _VL53L0X_ReadMulti (4 , , , _Dev -> -> 176 `i `uc _refSpadArray -> -> -> 6 `i `l `ul ]
"581
[; ;vl53/core/vl53l0x_api_calibration.c: 581:  return status;
[e ) _status ]
[e $UE 40  ]
"582
[; ;vl53/core/vl53l0x_api_calibration.c: 582: }
[e :UE 40 ]
}
"584
[; ;vl53/core/vl53l0x_api_calibration.c: 584: VL53L0X_Error enable_ref_spads(VL53L0X_DEV Dev,
[v _enable_ref_spads `(c ~T0 @X0 1 ef9`*S14`uc`*uc`*uc`ul`ul`ul`ul`*ul ]
"593
[; ;vl53/core/vl53l0x_api_calibration.c: 593: {
{
[e :U _enable_ref_spads ]
"584
[; ;vl53/core/vl53l0x_api_calibration.c: 584: VL53L0X_Error enable_ref_spads(VL53L0X_DEV Dev,
[v _Dev `*S14 ~T0 @X0 1 r1 ]
"585
[; ;vl53/core/vl53l0x_api_calibration.c: 585:     uint8_t apertureSpads,
[v _apertureSpads `uc ~T0 @X0 1 r2 ]
"586
[; ;vl53/core/vl53l0x_api_calibration.c: 586:     uint8_t goodSpadArray[],
[v _goodSpadArray `*uc ~T0 @X0 1 r3 ]
"587
[; ;vl53/core/vl53l0x_api_calibration.c: 587:     uint8_t spadArray[],
[v _spadArray `*uc ~T0 @X0 1 r4 ]
"588
[; ;vl53/core/vl53l0x_api_calibration.c: 588:     uint32_t size,
[v _size `ul ~T0 @X0 1 r5 ]
"589
[; ;vl53/core/vl53l0x_api_calibration.c: 589:     uint32_t start,
[v _start `ul ~T0 @X0 1 r6 ]
"590
[; ;vl53/core/vl53l0x_api_calibration.c: 590:     uint32_t offset,
[v _offset `ul ~T0 @X0 1 r7 ]
"591
[; ;vl53/core/vl53l0x_api_calibration.c: 591:     uint32_t spadCount,
[v _spadCount `ul ~T0 @X0 1 r8 ]
"592
[; ;vl53/core/vl53l0x_api_calibration.c: 592:     uint32_t *lastSpad)
[v _lastSpad `*ul ~T0 @X0 1 r9 ]
"593
[; ;vl53/core/vl53l0x_api_calibration.c: 593: {
[f ]
"594
[; ;vl53/core/vl53l0x_api_calibration.c: 594:  VL53L0X_Error status = ((VL53L0X_Error) 0);
[v _status `c ~T0 @X0 1 a ]
[e = _status -> -> 0 `i `c ]
"595
[; ;vl53/core/vl53l0x_api_calibration.c: 595:  uint32_t index;
[v _index `ul ~T0 @X0 1 a ]
"596
[; ;vl53/core/vl53l0x_api_calibration.c: 596:  uint32_t i;
[v _i `ul ~T0 @X0 1 a ]
"597
[; ;vl53/core/vl53l0x_api_calibration.c: 597:  int32_t nextGoodSpad = offset;
[v _nextGoodSpad `l ~T0 @X0 1 a ]
[e = _nextGoodSpad -> _offset `l ]
"598
[; ;vl53/core/vl53l0x_api_calibration.c: 598:  uint32_t currentSpad;
[v _currentSpad `ul ~T0 @X0 1 a ]
"599
[; ;vl53/core/vl53l0x_api_calibration.c: 599:  uint8_t checkSpadArray[6];
[v _checkSpadArray `uc ~T0 @X0 -> 6 `i a ]
"611
[; ;vl53/core/vl53l0x_api_calibration.c: 611:  currentSpad = offset;
[e = _currentSpad _offset ]
"612
[; ;vl53/core/vl53l0x_api_calibration.c: 612:  for (index = 0; index < spadCount; index++) {
{
[e = _index -> -> -> 0 `i `l `ul ]
[e $U 45  ]
[e :U 42 ]
{
"613
[; ;vl53/core/vl53l0x_api_calibration.c: 613:   get_next_good_spad(goodSpadArray, size, currentSpad,
[e ( _get_next_good_spad (4 , , , _goodSpadArray _size _currentSpad &U _nextGoodSpad ]
"616
[; ;vl53/core/vl53l0x_api_calibration.c: 616:   if (nextGoodSpad == -1) {
[e $ ! == _nextGoodSpad -> -U -> 1 `i `l 46  ]
{
"617
[; ;vl53/core/vl53l0x_api_calibration.c: 617:    status = ((VL53L0X_Error) - 50);
[e = _status -> -U -> 50 `i `c ]
"618
[; ;vl53/core/vl53l0x_api_calibration.c: 618:    break;
[e $U 43  ]
"619
[; ;vl53/core/vl53l0x_api_calibration.c: 619:   }
}
[e :U 46 ]
"622
[; ;vl53/core/vl53l0x_api_calibration.c: 622:   if (is_aperture(start + nextGoodSpad) != apertureSpads) {
[e $ ! != -> ( _is_aperture (1 + _start -> _nextGoodSpad `ul `i -> _apertureSpads `i 47  ]
{
"626
[; ;vl53/core/vl53l0x_api_calibration.c: 626:    status = ((VL53L0X_Error) - 50);
[e = _status -> -U -> 50 `i `c ]
"627
[; ;vl53/core/vl53l0x_api_calibration.c: 627:    break;
[e $U 43  ]
"628
[; ;vl53/core/vl53l0x_api_calibration.c: 628:   }
}
[e :U 47 ]
"629
[; ;vl53/core/vl53l0x_api_calibration.c: 629:   currentSpad = (uint32_t)nextGoodSpad;
[e = _currentSpad -> _nextGoodSpad `ul ]
"630
[; ;vl53/core/vl53l0x_api_calibration.c: 630:   enable_spad_bit(spadArray, size, currentSpad);
[e ( _enable_spad_bit (3 , , _spadArray _size _currentSpad ]
"631
[; ;vl53/core/vl53l0x_api_calibration.c: 631:   currentSpad++;
[e ++ _currentSpad -> -> -> 1 `i `l `ul ]
"632
[; ;vl53/core/vl53l0x_api_calibration.c: 632:  }
}
[e ++ _index -> -> -> 1 `i `l `ul ]
[e :U 45 ]
[e $ < _index _spadCount 42  ]
[e :U 43 ]
}
"633
[; ;vl53/core/vl53l0x_api_calibration.c: 633:  *lastSpad = currentSpad;
[e = *U _lastSpad _currentSpad ]
"635
[; ;vl53/core/vl53l0x_api_calibration.c: 635:  if (status == ((VL53L0X_Error) 0))
[e $ ! == -> _status `i -> -> -> 0 `i `c `i 48  ]
"636
[; ;vl53/core/vl53l0x_api_calibration.c: 636:   status = set_ref_spad_map(Dev, spadArray);
[e = _status ( _set_ref_spad_map (2 , _Dev _spadArray ]
[e :U 48 ]
"639
[; ;vl53/core/vl53l0x_api_calibration.c: 639:  if (status == ((VL53L0X_Error) 0)) {
[e $ ! == -> _status `i -> -> -> 0 `i `c `i 49  ]
{
"640
[; ;vl53/core/vl53l0x_api_calibration.c: 640:   status = get_ref_spad_map(Dev, checkSpadArray);
[e = _status ( _get_ref_spad_map (2 , _Dev &U _checkSpadArray ]
"642
[; ;vl53/core/vl53l0x_api_calibration.c: 642:   i = 0;
[e = _i -> -> -> 0 `i `l `ul ]
"645
[; ;vl53/core/vl53l0x_api_calibration.c: 645:   while (i < size) {
[e $U 50  ]
[e :U 51 ]
{
"646
[; ;vl53/core/vl53l0x_api_calibration.c: 646:    if (spadArray[i] != checkSpadArray[i]) {
[e $ ! != -> *U + _spadArray * -> _i `ux -> -> # *U _spadArray `ui `ux `i -> *U + &U _checkSpadArray * -> _i `ux -> -> # *U &U _checkSpadArray `ui `ux `i 53  ]
{
"647
[; ;vl53/core/vl53l0x_api_calibration.c: 647:     status = ((VL53L0X_Error) - 50);
[e = _status -> -U -> 50 `i `c ]
"648
[; ;vl53/core/vl53l0x_api_calibration.c: 648:     break;
[e $U 52  ]
"649
[; ;vl53/core/vl53l0x_api_calibration.c: 649:    }
}
[e :U 53 ]
"650
[; ;vl53/core/vl53l0x_api_calibration.c: 650:    i++;
[e ++ _i -> -> -> 1 `i `l `ul ]
"651
[; ;vl53/core/vl53l0x_api_calibration.c: 651:   }
}
[e :U 50 ]
"645
[; ;vl53/core/vl53l0x_api_calibration.c: 645:   while (i < size) {
[e $ < _i _size 51  ]
[e :U 52 ]
"652
[; ;vl53/core/vl53l0x_api_calibration.c: 652:  }
}
[e :U 49 ]
"653
[; ;vl53/core/vl53l0x_api_calibration.c: 653:  return status;
[e ) _status ]
[e $UE 41  ]
"654
[; ;vl53/core/vl53l0x_api_calibration.c: 654: }
[e :UE 41 ]
}
"657
[; ;vl53/core/vl53l0x_api_calibration.c: 657: VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
[v _perform_ref_signal_measurement `(c ~T0 @X0 1 ef2`*S14`*us ]
"659
[; ;vl53/core/vl53l0x_api_calibration.c: 659: {
{
[e :U _perform_ref_signal_measurement ]
"657
[; ;vl53/core/vl53l0x_api_calibration.c: 657: VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
[v _Dev `*S14 ~T0 @X0 1 r1 ]
"658
[; ;vl53/core/vl53l0x_api_calibration.c: 658:   uint16_t *refSignalRate)
[v _refSignalRate `*us ~T0 @X0 1 r2 ]
"659
[; ;vl53/core/vl53l0x_api_calibration.c: 659: {
[f ]
"660
[; ;vl53/core/vl53l0x_api_calibration.c: 660:  VL53L0X_Error status = ((VL53L0X_Error) 0);
[v _status `c ~T0 @X0 1 a ]
[e = _status -> -> 0 `i `c ]
"661
[; ;vl53/core/vl53l0x_api_calibration.c: 661:  VL53L0X_RangingMeasurementData_t rangingMeasurementData;
[v _rangingMeasurementData `S5 ~T0 @X0 1 a ]
"663
[; ;vl53/core/vl53l0x_api_calibration.c: 663:  uint8_t SequenceConfig = 0;
[v _SequenceConfig `uc ~T0 @X0 1 a ]
[e = _SequenceConfig -> -> 0 `i `uc ]
"669
[; ;vl53/core/vl53l0x_api_calibration.c: 669:  SequenceConfig = (Dev->Data.SequenceConfig);
[e = _SequenceConfig . . *U _Dev 0 7 ]
"674
[; ;vl53/core/vl53l0x_api_calibration.c: 674:  if (status == ((VL53L0X_Error) 0))
[e $ ! == -> _status `i -> -> -> 0 `i `c `i 55  ]
"675
[; ;vl53/core/vl53l0x_api_calibration.c: 675:   status = VL53L0X_WrByte(Dev,
[e = _status ( _VL53L0X_WrByte (3 , , _Dev -> -> 1 `i `uc -> -> 192 `i `uc ]
[e :U 55 ]
"678
[; ;vl53/core/vl53l0x_api_calibration.c: 678:  if (status == ((VL53L0X_Error) 0))
[e $ ! == -> _status `i -> -> -> 0 `i `c `i 56  ]
"679
[; ;vl53/core/vl53l0x_api_calibration.c: 679:   status = VL53L0X_PerformSingleRangingMeasurement(Dev,
[e = _status ( _VL53L0X_PerformSingleRangingMeasurement (2 , _Dev &U _rangingMeasurementData ]
[e :U 56 ]
"682
[; ;vl53/core/vl53l0x_api_calibration.c: 682:  if (status == ((VL53L0X_Error) 0))
[e $ ! == -> _status `i -> -> -> 0 `i `c `i 57  ]
"683
[; ;vl53/core/vl53l0x_api_calibration.c: 683:   status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
[e = _status ( _VL53L0X_WrByte (3 , , _Dev -> -> 255 `i `uc -> -> 1 `i `uc ]
[e :U 57 ]
"685
[; ;vl53/core/vl53l0x_api_calibration.c: 685:  if (status == ((VL53L0X_Error) 0))
[e $ ! == -> _status `i -> -> -> 0 `i `c `i 58  ]
"686
[; ;vl53/core/vl53l0x_api_calibration.c: 686:   status = VL53L0X_RdWord(Dev,
[e = _status ( _VL53L0X_RdWord (3 , , _Dev -> -> 182 `i `uc _refSignalRate ]
[e :U 58 ]
"690
[; ;vl53/core/vl53l0x_api_calibration.c: 690:  if (status == ((VL53L0X_Error) 0))
[e $ ! == -> _status `i -> -> -> 0 `i `c `i 59  ]
"691
[; ;vl53/core/vl53l0x_api_calibration.c: 691:   status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
[e = _status ( _VL53L0X_WrByte (3 , , _Dev -> -> 255 `i `uc -> -> 0 `i `uc ]
[e :U 59 ]
"693
[; ;vl53/core/vl53l0x_api_calibration.c: 693:  if (status == ((VL53L0X_Error) 0)) {
[e $ ! == -> _status `i -> -> -> 0 `i `c `i 60  ]
{
"695
[; ;vl53/core/vl53l0x_api_calibration.c: 695:   status = VL53L0X_WrByte(Dev, 0x0001,
[e = _status ( _VL53L0X_WrByte (3 , , _Dev -> -> 1 `i `uc _SequenceConfig ]
"697
[; ;vl53/core/vl53l0x_api_calibration.c: 697:   if (status == ((VL53L0X_Error) 0))
[e $ ! == -> _status `i -> -> -> 0 `i `c `i 61  ]
"698
[; ;vl53/core/vl53l0x_api_calibration.c: 698:    (Dev->Data.SequenceConfig)=(SequenceConfig);
[e = . . *U _Dev 0 7 _SequenceConfig ]
[e :U 61 ]
"699
[; ;vl53/core/vl53l0x_api_calibration.c: 699:  }
}
[e :U 60 ]
"701
[; ;vl53/core/vl53l0x_api_calibration.c: 701:  return status;
[e ) _status ]
[e $UE 54  ]
"702
[; ;vl53/core/vl53l0x_api_calibration.c: 702: }
[e :UE 54 ]
}
"704
[; ;vl53/core/vl53l0x_api_calibration.c: 704: VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
[v _VL53L0X_perform_ref_spad_management `(c ~T0 @X0 1 ef3`*S14`*ul`*uc ]
"707
[; ;vl53/core/vl53l0x_api_calibration.c: 707: {
{
[e :U _VL53L0X_perform_ref_spad_management ]
"704
[; ;vl53/core/vl53l0x_api_calibration.c: 704: VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
[v _Dev `*S14 ~T0 @X0 1 r1 ]
"705
[; ;vl53/core/vl53l0x_api_calibration.c: 705:     uint32_t *refSpadCount,
[v _refSpadCount `*ul ~T0 @X0 1 r2 ]
"706
[; ;vl53/core/vl53l0x_api_calibration.c: 706:     uint8_t *isApertureSpads)
[v _isApertureSpads `*uc ~T0 @X0 1 r3 ]
"707
[; ;vl53/core/vl53l0x_api_calibration.c: 707: {
[f ]
"708
[; ;vl53/core/vl53l0x_api_calibration.c: 708:  VL53L0X_Error Status = ((VL53L0X_Error) 0);
[v _Status `c ~T0 @X0 1 a ]
[e = _Status -> -> 0 `i `c ]
"709
[; ;vl53/core/vl53l0x_api_calibration.c: 709:  uint8_t lastSpadArray[6];
[v _lastSpadArray `uc ~T0 @X0 -> 6 `i a ]
"710
[; ;vl53/core/vl53l0x_api_calibration.c: 710:  uint8_t startSelect = 0xB4;
[v _startSelect `uc ~T0 @X0 1 a ]
[e = _startSelect -> -> 180 `i `uc ]
"711
[; ;vl53/core/vl53l0x_api_calibration.c: 711:  uint32_t minimumSpadCount = 3;
[v _minimumSpadCount `ul ~T0 @X0 1 a ]
[e = _minimumSpadCount -> -> -> 3 `i `l `ul ]
"712
[; ;vl53/core/vl53l0x_api_calibration.c: 712:  uint32_t maxSpadCount = 44;
[v _maxSpadCount `ul ~T0 @X0 1 a ]
[e = _maxSpadCount -> -> -> 44 `i `l `ul ]
"713
[; ;vl53/core/vl53l0x_api_calibration.c: 713:  uint32_t currentSpadIndex = 0;
[v _currentSpadIndex `ul ~T0 @X0 1 a ]
[e = _currentSpadIndex -> -> -> 0 `i `l `ul ]
"714
[; ;vl53/core/vl53l0x_api_calibration.c: 714:  uint32_t lastSpadIndex = 0;
[v _lastSpadIndex `ul ~T0 @X0 1 a ]
[e = _lastSpadIndex -> -> -> 0 `i `l `ul ]
"715
[; ;vl53/core/vl53l0x_api_calibration.c: 715:  int32_t nextGoodSpad = 0;
[v _nextGoodSpad `l ~T0 @X0 1 a ]
[e = _nextGoodSpad -> -> 0 `i `l ]
"716
[; ;vl53/core/vl53l0x_api_calibration.c: 716:  uint16_t targetRefRate = 0x0A00;
[v _targetRefRate `us ~T0 @X0 1 a ]
[e = _targetRefRate -> -> 2560 `i `us ]
"717
[; ;vl53/core/vl53l0x_api_calibration.c: 717:  uint16_t peakSignalRateRef;
[v _peakSignalRateRef `us ~T0 @X0 1 a ]
"718
[; ;vl53/core/vl53l0x_api_calibration.c: 718:  uint32_t needAptSpads = 0;
[v _needAptSpads `ul ~T0 @X0 1 a ]
[e = _needAptSpads -> -> -> 0 `i `l `ul ]
"719
[; ;vl53/core/vl53l0x_api_calibration.c: 719:  uint32_t index = 0;
[v _index `ul ~T0 @X0 1 a ]
[e = _index -> -> -> 0 `i `l `ul ]
"720
[; ;vl53/core/vl53l0x_api_calibration.c: 720:  uint32_t spadArraySize = 6;
[v _spadArraySize `ul ~T0 @X0 1 a ]
[e = _spadArraySize -> -> -> 6 `i `l `ul ]
"721
[; ;vl53/core/vl53l0x_api_calibration.c: 721:  uint32_t signalRateDiff = 0;
[v _signalRateDiff `ul ~T0 @X0 1 a ]
[e = _signalRateDiff -> -> -> 0 `i `l `ul ]
"722
[; ;vl53/core/vl53l0x_api_calibration.c: 722:  uint32_t lastSignalRateDiff = 0;
[v _lastSignalRateDiff `ul ~T0 @X0 1 a ]
[e = _lastSignalRateDiff -> -> -> 0 `i `l `ul ]
"723
[; ;vl53/core/vl53l0x_api_calibration.c: 723:  uint8_t complete = 0;
[v _complete `uc ~T0 @X0 1 a ]
[e = _complete -> -> 0 `i `uc ]
"724
[; ;vl53/core/vl53l0x_api_calibration.c: 724:  uint8_t VhvSettings = 0;
[v _VhvSettings `uc ~T0 @X0 1 a ]
[e = _VhvSettings -> -> 0 `i `uc ]
"725
[; ;vl53/core/vl53l0x_api_calibration.c: 725:  uint8_t PhaseCal = 0;
[v _PhaseCal `uc ~T0 @X0 1 a ]
[e = _PhaseCal -> -> 0 `i `uc ]
"726
[; ;vl53/core/vl53l0x_api_calibration.c: 726:  uint32_t refSpadCount_int = 0;
[v _refSpadCount_int `ul ~T0 @X0 1 a ]
[e = _refSpadCount_int -> -> -> 0 `i `l `ul ]
"727
[; ;vl53/core/vl53l0x_api_calibration.c: 727:  uint8_t isApertureSpads_int = 0;
[v _isApertureSpads_int `uc ~T0 @X0 1 a ]
[e = _isApertureSpads_int -> -> 0 `i `uc ]
"752
[; ;vl53/core/vl53l0x_api_calibration.c: 752:  targetRefRate = (Dev->Data.targetRefRate);
[e = _targetRefRate . . *U _Dev 0 15 ]
"762
[; ;vl53/core/vl53l0x_api_calibration.c: 762:  for (index = 0; index < spadArraySize; index++)
{
[e = _index -> -> -> 0 `i `l `ul ]
[e $U 66  ]
[e :U 63 ]
"763
[; ;vl53/core/vl53l0x_api_calibration.c: 763:   Dev->Data.SpadData.RefSpadEnables[index] = 0;
[e = *U + &U . . . *U _Dev 0 6 0 * -> _index `ux -> -> # *U &U . . . *U _Dev 0 6 0 `ui `ux -> -> 0 `i `uc ]
[e ++ _index -> -> -> 1 `i `l `ul ]
[e :U 66 ]
[e $ < _index _spadArraySize 63  ]
[e :U 64 ]
}
"766
[; ;vl53/core/vl53l0x_api_calibration.c: 766:  Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
[e = _Status ( _VL53L0X_WrByte (3 , , _Dev -> -> 255 `i `uc -> -> 1 `i `uc ]
"768
[; ;vl53/core/vl53l0x_api_calibration.c: 768:  if (Status == ((VL53L0X_Error) 0))
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 67  ]
"769
[; ;vl53/core/vl53l0x_api_calibration.c: 769:   Status = VL53L0X_WrByte(Dev,
[e = _Status ( _VL53L0X_WrByte (3 , , _Dev -> -> 79 `i `uc -> -> 0 `i `uc ]
[e :U 67 ]
"772
[; ;vl53/core/vl53l0x_api_calibration.c: 772:  if (Status == ((VL53L0X_Error) 0))
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 68  ]
"773
[; ;vl53/core/vl53l0x_api_calibration.c: 773:   Status = VL53L0X_WrByte(Dev,
[e = _Status ( _VL53L0X_WrByte (3 , , _Dev -> -> 78 `i `uc -> -> 44 `i `uc ]
[e :U 68 ]
"776
[; ;vl53/core/vl53l0x_api_calibration.c: 776:  if (Status == ((VL53L0X_Error) 0))
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 69  ]
"777
[; ;vl53/core/vl53l0x_api_calibration.c: 777:   Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
[e = _Status ( _VL53L0X_WrByte (3 , , _Dev -> -> 255 `i `uc -> -> 0 `i `uc ]
[e :U 69 ]
"779
[; ;vl53/core/vl53l0x_api_calibration.c: 779:  if (Status == ((VL53L0X_Error) 0))
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 70  ]
"780
[; ;vl53/core/vl53l0x_api_calibration.c: 780:   Status = VL53L0X_WrByte(Dev,
[e = _Status ( _VL53L0X_WrByte (3 , , _Dev -> -> 182 `i `uc _startSelect ]
[e :U 70 ]
"785
[; ;vl53/core/vl53l0x_api_calibration.c: 785:  if (Status == ((VL53L0X_Error) 0))
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 71  ]
"786
[; ;vl53/core/vl53l0x_api_calibration.c: 786:   Status = VL53L0X_WrByte(Dev,
[e = _Status ( _VL53L0X_WrByte (3 , , _Dev -> -> 128 `i `uc -> -> 0 `i `uc ]
[e :U 71 ]
"790
[; ;vl53/core/vl53l0x_api_calibration.c: 790:  if (Status == ((VL53L0X_Error) 0))
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 72  ]
"791
[; ;vl53/core/vl53l0x_api_calibration.c: 791:   Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
[e = _Status ( _VL53L0X_perform_ref_calibration (4 , , , _Dev &U _VhvSettings &U _PhaseCal -> -> 0 `i `uc ]
[e :U 72 ]
"794
[; ;vl53/core/vl53l0x_api_calibration.c: 794:  if (Status == ((VL53L0X_Error) 0)) {
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 73  ]
{
"796
[; ;vl53/core/vl53l0x_api_calibration.c: 796:   currentSpadIndex = 0;
[e = _currentSpadIndex -> -> -> 0 `i `l `ul ]
"797
[; ;vl53/core/vl53l0x_api_calibration.c: 797:   lastSpadIndex = currentSpadIndex;
[e = _lastSpadIndex _currentSpadIndex ]
"798
[; ;vl53/core/vl53l0x_api_calibration.c: 798:   needAptSpads = 0;
[e = _needAptSpads -> -> -> 0 `i `l `ul ]
"799
[; ;vl53/core/vl53l0x_api_calibration.c: 799:   Status = enable_ref_spads(Dev,
[e = _Status ( _enable_ref_spads (4 , , , , , , , , _Dev -> _needAptSpads `uc &U . . . *U _Dev 0 6 1 &U . . . *U _Dev 0 6 0 _spadArraySize -> _startSelect `ul _currentSpadIndex _minimumSpadCount &U _lastSpadIndex ]
"808
[; ;vl53/core/vl53l0x_api_calibration.c: 808:  }
}
[e :U 73 ]
"810
[; ;vl53/core/vl53l0x_api_calibration.c: 810:  if (Status == ((VL53L0X_Error) 0)) {
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 74  ]
{
"811
[; ;vl53/core/vl53l0x_api_calibration.c: 811:   currentSpadIndex = lastSpadIndex;
[e = _currentSpadIndex _lastSpadIndex ]
"813
[; ;vl53/core/vl53l0x_api_calibration.c: 813:   Status = perform_ref_signal_measurement(Dev,
[e = _Status ( _perform_ref_signal_measurement (2 , _Dev &U _peakSignalRateRef ]
"815
[; ;vl53/core/vl53l0x_api_calibration.c: 815:   if ((Status == ((VL53L0X_Error) 0)) &&
[e $ ! && == -> _Status `i -> -> -> 0 `i `c `i > -> _peakSignalRateRef `ui -> _targetRefRate `ui 75  ]
"816
[; ;vl53/core/vl53l0x_api_calibration.c: 816:    (peakSignalRateRef > targetRefRate)) {
{
"821
[; ;vl53/core/vl53l0x_api_calibration.c: 821:    for (index = 0; index < spadArraySize; index++)
{
[e = _index -> -> -> 0 `i `l `ul ]
[e $U 79  ]
[e :U 76 ]
"822
[; ;vl53/core/vl53l0x_api_calibration.c: 822:     Dev->Data.SpadData.RefSpadEnables[index] = 0;
[e = *U + &U . . . *U _Dev 0 6 0 * -> _index `ux -> -> # *U &U . . . *U _Dev 0 6 0 `ui `ux -> -> 0 `i `uc ]
[e ++ _index -> -> -> 1 `i `l `ul ]
[e :U 79 ]
[e $ < _index _spadArraySize 76  ]
[e :U 77 ]
}
"826
[; ;vl53/core/vl53l0x_api_calibration.c: 826:    while ((is_aperture(startSelect + currentSpadIndex)
[e $U 80  ]
[e :U 81 ]
"827
[; ;vl53/core/vl53l0x_api_calibration.c: 827:     == 0) && (currentSpadIndex < maxSpadCount)) {
{
"828
[; ;vl53/core/vl53l0x_api_calibration.c: 828:     currentSpadIndex++;
[e ++ _currentSpadIndex -> -> -> 1 `i `l `ul ]
"829
[; ;vl53/core/vl53l0x_api_calibration.c: 829:    }
}
[e :U 80 ]
"826
[; ;vl53/core/vl53l0x_api_calibration.c: 826:    while ((is_aperture(startSelect + currentSpadIndex)
[e $ && == -> ( _is_aperture (1 + -> _startSelect `ul _currentSpadIndex `i -> 0 `i < _currentSpadIndex _maxSpadCount 81  ]
[e :U 82 ]
"831
[; ;vl53/core/vl53l0x_api_calibration.c: 831:    needAptSpads = 1;
[e = _needAptSpads -> -> -> 1 `i `l `ul ]
"833
[; ;vl53/core/vl53l0x_api_calibration.c: 833:    Status = enable_ref_spads(Dev,
[e = _Status ( _enable_ref_spads (4 , , , , , , , , _Dev -> _needAptSpads `uc &U . . . *U _Dev 0 6 1 &U . . . *U _Dev 0 6 0 _spadArraySize -> _startSelect `ul _currentSpadIndex _minimumSpadCount &U _lastSpadIndex ]
"843
[; ;vl53/core/vl53l0x_api_calibration.c: 843:    if (Status == ((VL53L0X_Error) 0)) {
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 83  ]
{
"844
[; ;vl53/core/vl53l0x_api_calibration.c: 844:     currentSpadIndex = lastSpadIndex;
[e = _currentSpadIndex _lastSpadIndex ]
"845
[; ;vl53/core/vl53l0x_api_calibration.c: 845:     Status = perform_ref_signal_measurement(Dev,
[e = _Status ( _perform_ref_signal_measurement (2 , _Dev &U _peakSignalRateRef ]
"848
[; ;vl53/core/vl53l0x_api_calibration.c: 848:     if ((Status == ((VL53L0X_Error) 0)) &&
[e $ ! && == -> _Status `i -> -> -> 0 `i `c `i > -> _peakSignalRateRef `ui -> _targetRefRate `ui 84  ]
"849
[; ;vl53/core/vl53l0x_api_calibration.c: 849:      (peakSignalRateRef > targetRefRate)) {
{
"856
[; ;vl53/core/vl53l0x_api_calibration.c: 856:      isApertureSpads_int = 1;
[e = _isApertureSpads_int -> -> 1 `i `uc ]
"857
[; ;vl53/core/vl53l0x_api_calibration.c: 857:      refSpadCount_int = minimumSpadCount;
[e = _refSpadCount_int _minimumSpadCount ]
"858
[; ;vl53/core/vl53l0x_api_calibration.c: 858:     }
}
[e :U 84 ]
"859
[; ;vl53/core/vl53l0x_api_calibration.c: 859:    }
}
[e :U 83 ]
"860
[; ;vl53/core/vl53l0x_api_calibration.c: 860:   } else {
}
[e $U 85  ]
[e :U 75 ]
{
"861
[; ;vl53/core/vl53l0x_api_calibration.c: 861:    needAptSpads = 0;
[e = _needAptSpads -> -> -> 0 `i `l `ul ]
"862
[; ;vl53/core/vl53l0x_api_calibration.c: 862:   }
}
[e :U 85 ]
"863
[; ;vl53/core/vl53l0x_api_calibration.c: 863:  }
}
[e :U 74 ]
"865
[; ;vl53/core/vl53l0x_api_calibration.c: 865:  if ((Status == ((VL53L0X_Error) 0)) &&
[e $ ! && == -> _Status `i -> -> -> 0 `i `c `i < -> _peakSignalRateRef `ui -> _targetRefRate `ui 86  ]
"866
[; ;vl53/core/vl53l0x_api_calibration.c: 866:   (peakSignalRateRef < targetRefRate)) {
{
"872
[; ;vl53/core/vl53l0x_api_calibration.c: 872:   isApertureSpads_int = needAptSpads;
[e = _isApertureSpads_int -> _needAptSpads `uc ]
"873
[; ;vl53/core/vl53l0x_api_calibration.c: 873:   refSpadCount_int = minimumSpadCount;
[e = _refSpadCount_int _minimumSpadCount ]
"875
[; ;vl53/core/vl53l0x_api_calibration.c: 875:   memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
[e ( _memcpy (3 , , -> &U _lastSpadArray `*v -> &U . . . *U _Dev 0 6 0 `*Cv -> _spadArraySize `ui ]
"877
[; ;vl53/core/vl53l0x_api_calibration.c: 877:   lastSignalRateDiff = abs(peakSignalRateRef -
[e = _lastSignalRateDiff -> -> ( _abs (1 -> - -> _peakSignalRateRef `ui -> _targetRefRate `ui `i `l `ul ]
"879
[; ;vl53/core/vl53l0x_api_calibration.c: 879:   complete = 0;
[e = _complete -> -> 0 `i `uc ]
"881
[; ;vl53/core/vl53l0x_api_calibration.c: 881:   while (!complete) {
[e $U 87  ]
[e :U 88 ]
{
"882
[; ;vl53/core/vl53l0x_api_calibration.c: 882:    get_next_good_spad(
[e ( _get_next_good_spad (4 , , , &U . . . *U _Dev 0 6 1 _spadArraySize _currentSpadIndex &U _nextGoodSpad ]
"887
[; ;vl53/core/vl53l0x_api_calibration.c: 887:    if (nextGoodSpad == -1) {
[e $ ! == _nextGoodSpad -> -U -> 1 `i `l 90  ]
{
"888
[; ;vl53/core/vl53l0x_api_calibration.c: 888:     Status = ((VL53L0X_Error) - 50);
[e = _Status -> -U -> 50 `i `c ]
"889
[; ;vl53/core/vl53l0x_api_calibration.c: 889:     break;
[e $U 89  ]
"890
[; ;vl53/core/vl53l0x_api_calibration.c: 890:    }
}
[e :U 90 ]
"895
[; ;vl53/core/vl53l0x_api_calibration.c: 895:    if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
[e $ ! != -> ( _is_aperture (1 + -> _startSelect `ul -> _nextGoodSpad `ul `ul _needAptSpads 91  ]
"896
[; ;vl53/core/vl53l0x_api_calibration.c: 896:      needAptSpads) {
{
"900
[; ;vl53/core/vl53l0x_api_calibration.c: 900:     complete = 1;
[e = _complete -> -> 1 `i `uc ]
"901
[; ;vl53/core/vl53l0x_api_calibration.c: 901:     break;
[e $U 89  ]
"902
[; ;vl53/core/vl53l0x_api_calibration.c: 902:    }
}
[e :U 91 ]
"904
[; ;vl53/core/vl53l0x_api_calibration.c: 904:    (refSpadCount_int)++;
[e ++ _refSpadCount_int -> -> -> 1 `i `l `ul ]
"906
[; ;vl53/core/vl53l0x_api_calibration.c: 906:    currentSpadIndex = nextGoodSpad;
[e = _currentSpadIndex -> _nextGoodSpad `ul ]
"907
[; ;vl53/core/vl53l0x_api_calibration.c: 907:    Status = enable_spad_bit(
[e = _Status ( _enable_spad_bit (3 , , &U . . . *U _Dev 0 6 0 _spadArraySize _currentSpadIndex ]
"911
[; ;vl53/core/vl53l0x_api_calibration.c: 911:    if (Status == ((VL53L0X_Error) 0)) {
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 92  ]
{
"912
[; ;vl53/core/vl53l0x_api_calibration.c: 912:     currentSpadIndex++;
[e ++ _currentSpadIndex -> -> -> 1 `i `l `ul ]
"916
[; ;vl53/core/vl53l0x_api_calibration.c: 916:     Status = set_ref_spad_map(Dev,
[e = _Status ( _set_ref_spad_map (2 , _Dev &U . . . *U _Dev 0 6 0 ]
"918
[; ;vl53/core/vl53l0x_api_calibration.c: 918:    }
}
[e :U 92 ]
"920
[; ;vl53/core/vl53l0x_api_calibration.c: 920:    if (Status != ((VL53L0X_Error) 0))
[e $ ! != -> _Status `i -> -> -> 0 `i `c `i 93  ]
"921
[; ;vl53/core/vl53l0x_api_calibration.c: 921:     break;
[e $U 89  ]
[e :U 93 ]
"923
[; ;vl53/core/vl53l0x_api_calibration.c: 923:    Status = perform_ref_signal_measurement(Dev,
[e = _Status ( _perform_ref_signal_measurement (2 , _Dev &U _peakSignalRateRef ]
"926
[; ;vl53/core/vl53l0x_api_calibration.c: 926:    if (Status != ((VL53L0X_Error) 0))
[e $ ! != -> _Status `i -> -> -> 0 `i `c `i 94  ]
"927
[; ;vl53/core/vl53l0x_api_calibration.c: 927:     break;
[e $U 89  ]
[e :U 94 ]
"929
[; ;vl53/core/vl53l0x_api_calibration.c: 929:    signalRateDiff = abs(peakSignalRateRef - targetRefRate);
[e = _signalRateDiff -> -> ( _abs (1 -> - -> _peakSignalRateRef `ui -> _targetRefRate `ui `i `l `ul ]
"931
[; ;vl53/core/vl53l0x_api_calibration.c: 931:    if (peakSignalRateRef > targetRefRate) {
[e $ ! > -> _peakSignalRateRef `ui -> _targetRefRate `ui 95  ]
{
"936
[; ;vl53/core/vl53l0x_api_calibration.c: 936:     if (signalRateDiff > lastSignalRateDiff) {
[e $ ! > _signalRateDiff _lastSignalRateDiff 96  ]
{
"940
[; ;vl53/core/vl53l0x_api_calibration.c: 940:      Status = set_ref_spad_map(Dev,
[e = _Status ( _set_ref_spad_map (2 , _Dev &U _lastSpadArray ]
"942
[; ;vl53/core/vl53l0x_api_calibration.c: 942:      memcpy(
[e ( _memcpy (3 , , -> &U . . . *U _Dev 0 6 0 `*v -> &U _lastSpadArray `*Cv -> _spadArraySize `ui ]
"946
[; ;vl53/core/vl53l0x_api_calibration.c: 946:      (refSpadCount_int)--;
[e -- _refSpadCount_int -> -> -> 1 `i `l `ul ]
"947
[; ;vl53/core/vl53l0x_api_calibration.c: 947:     }
}
[e :U 96 ]
"948
[; ;vl53/core/vl53l0x_api_calibration.c: 948:     complete = 1;
[e = _complete -> -> 1 `i `uc ]
"949
[; ;vl53/core/vl53l0x_api_calibration.c: 949:    } else {
}
[e $U 97  ]
[e :U 95 ]
{
"951
[; ;vl53/core/vl53l0x_api_calibration.c: 951:     lastSignalRateDiff = signalRateDiff;
[e = _lastSignalRateDiff _signalRateDiff ]
"952
[; ;vl53/core/vl53l0x_api_calibration.c: 952:     memcpy(lastSpadArray,
[e ( _memcpy (3 , , -> &U _lastSpadArray `*v -> &U . . . *U _Dev 0 6 0 `*Cv -> _spadArraySize `ui ]
"955
[; ;vl53/core/vl53l0x_api_calibration.c: 955:    }
}
[e :U 97 ]
"957
[; ;vl53/core/vl53l0x_api_calibration.c: 957:   }
}
[e :U 87 ]
"881
[; ;vl53/core/vl53l0x_api_calibration.c: 881:   while (!complete) {
[e $ ! != -> _complete `i -> 0 `i 88  ]
[e :U 89 ]
"958
[; ;vl53/core/vl53l0x_api_calibration.c: 958:  }
}
[e :U 86 ]
"960
[; ;vl53/core/vl53l0x_api_calibration.c: 960:  if (Status == ((VL53L0X_Error) 0)) {
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 98  ]
{
"961
[; ;vl53/core/vl53l0x_api_calibration.c: 961:   *refSpadCount = refSpadCount_int;
[e = *U _refSpadCount _refSpadCount_int ]
"962
[; ;vl53/core/vl53l0x_api_calibration.c: 962:   *isApertureSpads = isApertureSpads_int;
[e = *U _isApertureSpads _isApertureSpads_int ]
"964
[; ;vl53/core/vl53l0x_api_calibration.c: 964:   (Dev->Data.DeviceSpecificParameters.RefSpadsInitialised)=(1);
[e = . . . *U _Dev 0 5 16 -> -> 1 `i `uc ]
"965
[; ;vl53/core/vl53l0x_api_calibration.c: 965:   (Dev->Data.DeviceSpecificParameters.ReferenceSpadCount)=((uint8_t)(*refSpadCount));
[e = . . . *U _Dev 0 5 14 -> *U _refSpadCount `uc ]
"967
[; ;vl53/core/vl53l0x_api_calibration.c: 967:   (Dev->Data.DeviceSpecificParameters.ReferenceSpadType)=(*isApertureSpads);
[e = . . . *U _Dev 0 5 15 *U _isApertureSpads ]
"969
[; ;vl53/core/vl53l0x_api_calibration.c: 969:  }
}
[e :U 98 ]
"971
[; ;vl53/core/vl53l0x_api_calibration.c: 971:  return Status;
[e ) _Status ]
[e $UE 62  ]
"972
[; ;vl53/core/vl53l0x_api_calibration.c: 972: }
[e :UE 62 ]
}
"974
[; ;vl53/core/vl53l0x_api_calibration.c: 974: VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
[v _VL53L0X_set_reference_spads `(c ~T0 @X0 1 ef3`*S14`ul`uc ]
"976
[; ;vl53/core/vl53l0x_api_calibration.c: 976: {
{
[e :U _VL53L0X_set_reference_spads ]
"974
[; ;vl53/core/vl53l0x_api_calibration.c: 974: VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
[v _Dev `*S14 ~T0 @X0 1 r1 ]
"975
[; ;vl53/core/vl53l0x_api_calibration.c: 975:      uint32_t count, uint8_t isApertureSpads)
[v _count `ul ~T0 @X0 1 r2 ]
[v _isApertureSpads `uc ~T0 @X0 1 r3 ]
"976
[; ;vl53/core/vl53l0x_api_calibration.c: 976: {
[f ]
"977
[; ;vl53/core/vl53l0x_api_calibration.c: 977:  VL53L0X_Error Status = ((VL53L0X_Error) 0);
[v _Status `c ~T0 @X0 1 a ]
[e = _Status -> -> 0 `i `c ]
"978
[; ;vl53/core/vl53l0x_api_calibration.c: 978:  uint32_t currentSpadIndex = 0;
[v _currentSpadIndex `ul ~T0 @X0 1 a ]
[e = _currentSpadIndex -> -> -> 0 `i `l `ul ]
"979
[; ;vl53/core/vl53l0x_api_calibration.c: 979:  uint8_t startSelect = 0xB4;
[v _startSelect `uc ~T0 @X0 1 a ]
[e = _startSelect -> -> 180 `i `uc ]
"980
[; ;vl53/core/vl53l0x_api_calibration.c: 980:  uint32_t spadArraySize = 6;
[v _spadArraySize `ul ~T0 @X0 1 a ]
[e = _spadArraySize -> -> -> 6 `i `l `ul ]
"981
[; ;vl53/core/vl53l0x_api_calibration.c: 981:  uint32_t maxSpadCount = 44;
[v _maxSpadCount `ul ~T0 @X0 1 a ]
[e = _maxSpadCount -> -> -> 44 `i `l `ul ]
"982
[; ;vl53/core/vl53l0x_api_calibration.c: 982:  uint32_t lastSpadIndex;
[v _lastSpadIndex `ul ~T0 @X0 1 a ]
"983
[; ;vl53/core/vl53l0x_api_calibration.c: 983:  uint32_t index;
[v _index `ul ~T0 @X0 1 a ]
"992
[; ;vl53/core/vl53l0x_api_calibration.c: 992:  Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
[e = _Status ( _VL53L0X_WrByte (3 , , _Dev -> -> 255 `i `uc -> -> 1 `i `uc ]
"994
[; ;vl53/core/vl53l0x_api_calibration.c: 994:  if (Status == ((VL53L0X_Error) 0))
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 100  ]
"995
[; ;vl53/core/vl53l0x_api_calibration.c: 995:   Status = VL53L0X_WrByte(Dev,
[e = _Status ( _VL53L0X_WrByte (3 , , _Dev -> -> 79 `i `uc -> -> 0 `i `uc ]
[e :U 100 ]
"998
[; ;vl53/core/vl53l0x_api_calibration.c: 998:  if (Status == ((VL53L0X_Error) 0))
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 101  ]
"999
[; ;vl53/core/vl53l0x_api_calibration.c: 999:   Status = VL53L0X_WrByte(Dev,
[e = _Status ( _VL53L0X_WrByte (3 , , _Dev -> -> 78 `i `uc -> -> 44 `i `uc ]
[e :U 101 ]
"1002
[; ;vl53/core/vl53l0x_api_calibration.c: 1002:  if (Status == ((VL53L0X_Error) 0))
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 102  ]
"1003
[; ;vl53/core/vl53l0x_api_calibration.c: 1003:   Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
[e = _Status ( _VL53L0X_WrByte (3 , , _Dev -> -> 255 `i `uc -> -> 0 `i `uc ]
[e :U 102 ]
"1005
[; ;vl53/core/vl53l0x_api_calibration.c: 1005:  if (Status == ((VL53L0X_Error) 0))
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 103  ]
"1006
[; ;vl53/core/vl53l0x_api_calibration.c: 1006:   Status = VL53L0X_WrByte(Dev,
[e = _Status ( _VL53L0X_WrByte (3 , , _Dev -> -> 182 `i `uc _startSelect ]
[e :U 103 ]
"1010
[; ;vl53/core/vl53l0x_api_calibration.c: 1010:  for (index = 0; index < spadArraySize; index++)
{
[e = _index -> -> -> 0 `i `l `ul ]
[e $U 107  ]
[e :U 104 ]
"1011
[; ;vl53/core/vl53l0x_api_calibration.c: 1011:   Dev->Data.SpadData.RefSpadEnables[index] = 0;
[e = *U + &U . . . *U _Dev 0 6 0 * -> _index `ux -> -> # *U &U . . . *U _Dev 0 6 0 `ui `ux -> -> 0 `i `uc ]
[e ++ _index -> -> -> 1 `i `l `ul ]
[e :U 107 ]
[e $ < _index _spadArraySize 104  ]
[e :U 105 ]
}
"1013
[; ;vl53/core/vl53l0x_api_calibration.c: 1013:  if (isApertureSpads) {
[e $ ! != -> _isApertureSpads `i -> 0 `i 108  ]
{
"1015
[; ;vl53/core/vl53l0x_api_calibration.c: 1015:   while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
[e $U 109  ]
[e :U 110 ]
"1016
[; ;vl53/core/vl53l0x_api_calibration.c: 1016:      (currentSpadIndex < maxSpadCount)) {
{
"1017
[; ;vl53/core/vl53l0x_api_calibration.c: 1017:    currentSpadIndex++;
[e ++ _currentSpadIndex -> -> -> 1 `i `l `ul ]
"1018
[; ;vl53/core/vl53l0x_api_calibration.c: 1018:   }
}
[e :U 109 ]
"1015
[; ;vl53/core/vl53l0x_api_calibration.c: 1015:   while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
[e $ && == -> ( _is_aperture (1 + -> _startSelect `ul _currentSpadIndex `i -> 0 `i < _currentSpadIndex _maxSpadCount 110  ]
[e :U 111 ]
"1019
[; ;vl53/core/vl53l0x_api_calibration.c: 1019:  }
}
[e :U 108 ]
"1020
[; ;vl53/core/vl53l0x_api_calibration.c: 1020:  Status = enable_ref_spads(Dev,
[e = _Status ( _enable_ref_spads (4 , , , , , , , , _Dev _isApertureSpads &U . . . *U _Dev 0 6 1 &U . . . *U _Dev 0 6 0 _spadArraySize -> _startSelect `ul _currentSpadIndex _count &U _lastSpadIndex ]
"1030
[; ;vl53/core/vl53l0x_api_calibration.c: 1030:  if (Status == ((VL53L0X_Error) 0)) {
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 112  ]
{
"1031
[; ;vl53/core/vl53l0x_api_calibration.c: 1031:   (Dev->Data.DeviceSpecificParameters.RefSpadsInitialised)=(1);
[e = . . . *U _Dev 0 5 16 -> -> 1 `i `uc ]
"1032
[; ;vl53/core/vl53l0x_api_calibration.c: 1032:   (Dev->Data.DeviceSpecificParameters.ReferenceSpadCount)=((uint8_t)(count));
[e = . . . *U _Dev 0 5 14 -> _count `uc ]
"1034
[; ;vl53/core/vl53l0x_api_calibration.c: 1034:   (Dev->Data.DeviceSpecificParameters.ReferenceSpadType)=(isApertureSpads);
[e = . . . *U _Dev 0 5 15 _isApertureSpads ]
"1036
[; ;vl53/core/vl53l0x_api_calibration.c: 1036:  }
}
[e :U 112 ]
"1038
[; ;vl53/core/vl53l0x_api_calibration.c: 1038:  return Status;
[e ) _Status ]
[e $UE 99  ]
"1039
[; ;vl53/core/vl53l0x_api_calibration.c: 1039: }
[e :UE 99 ]
}
"1097
[; ;vl53/core/vl53l0x_api_calibration.c: 1097: VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
[v _VL53L0X_perform_single_ref_calibration `(c ~T0 @X0 1 ef2`*S14`uc ]
"1099
[; ;vl53/core/vl53l0x_api_calibration.c: 1099: {
{
[e :U _VL53L0X_perform_single_ref_calibration ]
"1097
[; ;vl53/core/vl53l0x_api_calibration.c: 1097: VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
[v _Dev `*S14 ~T0 @X0 1 r1 ]
"1098
[; ;vl53/core/vl53l0x_api_calibration.c: 1098:   uint8_t vhv_init_byte)
[v _vhv_init_byte `uc ~T0 @X0 1 r2 ]
"1099
[; ;vl53/core/vl53l0x_api_calibration.c: 1099: {
[f ]
"1100
[; ;vl53/core/vl53l0x_api_calibration.c: 1100:  VL53L0X_Error Status = ((VL53L0X_Error) 0);
[v _Status `c ~T0 @X0 1 a ]
[e = _Status -> -> 0 `i `c ]
"1102
[; ;vl53/core/vl53l0x_api_calibration.c: 1102:  if (Status == ((VL53L0X_Error) 0))
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 114  ]
"1103
[; ;vl53/core/vl53l0x_api_calibration.c: 1103:   Status = VL53L0X_WrByte(Dev, 0x000,
[e = _Status ( _VL53L0X_WrByte (3 , , _Dev -> -> 0 `i `uc -> | -> 1 `i -> _vhv_init_byte `i `uc ]
[e :U 114 ]
"1107
[; ;vl53/core/vl53l0x_api_calibration.c: 1107:  if (Status == ((VL53L0X_Error) 0))
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 115  ]
"1108
[; ;vl53/core/vl53l0x_api_calibration.c: 1108:   Status = VL53L0X_measurement_poll_for_completion(Dev);
[e = _Status ( _VL53L0X_measurement_poll_for_completion (1 _Dev ]
[e :U 115 ]
"1110
[; ;vl53/core/vl53l0x_api_calibration.c: 1110:  if (Status == ((VL53L0X_Error) 0))
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 116  ]
"1111
[; ;vl53/core/vl53l0x_api_calibration.c: 1111:   Status = VL53L0X_ClearInterruptMask(Dev, 0);
[e = _Status ( _VL53L0X_ClearInterruptMask (2 , _Dev -> -> -> 0 `i `l `ul ]
[e :U 116 ]
"1113
[; ;vl53/core/vl53l0x_api_calibration.c: 1113:  if (Status == ((VL53L0X_Error) 0))
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 117  ]
"1114
[; ;vl53/core/vl53l0x_api_calibration.c: 1114:   Status = VL53L0X_WrByte(Dev, 0x000, 0x00);
[e = _Status ( _VL53L0X_WrByte (3 , , _Dev -> -> 0 `i `uc -> -> 0 `i `uc ]
[e :U 117 ]
"1116
[; ;vl53/core/vl53l0x_api_calibration.c: 1116:  return Status;
[e ) _Status ]
[e $UE 113  ]
"1117
[; ;vl53/core/vl53l0x_api_calibration.c: 1117: }
[e :UE 113 ]
}
"1120
[; ;vl53/core/vl53l0x_api_calibration.c: 1120: VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev,
[v _VL53L0X_ref_calibration_io `(c ~T0 @X0 1 ef8`*S14`uc`uc`uc`*uc`*uc`Cuc`Cuc ]
"1125
[; ;vl53/core/vl53l0x_api_calibration.c: 1125: {
{
[e :U _VL53L0X_ref_calibration_io ]
"1120
[; ;vl53/core/vl53l0x_api_calibration.c: 1120: VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev,
[v _Dev `*S14 ~T0 @X0 1 r1 ]
"1121
[; ;vl53/core/vl53l0x_api_calibration.c: 1121:  uint8_t read_not_write,
[v _read_not_write `uc ~T0 @X0 1 r2 ]
"1122
[; ;vl53/core/vl53l0x_api_calibration.c: 1122:  uint8_t VhvSettings, uint8_t PhaseCal,
[v _VhvSettings `uc ~T0 @X0 1 r3 ]
[v _PhaseCal `uc ~T0 @X0 1 r4 ]
"1123
[; ;vl53/core/vl53l0x_api_calibration.c: 1123:  uint8_t *pVhvSettings, uint8_t *pPhaseCal,
[v _pVhvSettings `*uc ~T0 @X0 1 r5 ]
[v _pPhaseCal `*uc ~T0 @X0 1 r6 ]
"1124
[; ;vl53/core/vl53l0x_api_calibration.c: 1124:  const uint8_t vhv_enable, const uint8_t phase_enable)
[v _vhv_enable `Cuc ~T0 @X0 1 r7 ]
[v _phase_enable `Cuc ~T0 @X0 1 r8 ]
"1125
[; ;vl53/core/vl53l0x_api_calibration.c: 1125: {
[f ]
"1126
[; ;vl53/core/vl53l0x_api_calibration.c: 1126:  VL53L0X_Error Status = ((VL53L0X_Error) 0);
[v _Status `c ~T0 @X0 1 a ]
[e = _Status -> -> 0 `i `c ]
"1127
[; ;vl53/core/vl53l0x_api_calibration.c: 1127:  uint8_t PhaseCalint = 0;
[v _PhaseCalint `uc ~T0 @X0 1 a ]
[e = _PhaseCalint -> -> 0 `i `uc ]
"1130
[; ;vl53/core/vl53l0x_api_calibration.c: 1130:  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
[e =| _Status -> ( _VL53L0X_WrByte (3 , , _Dev -> -> 255 `i `uc -> -> 1 `i `uc `c ]
"1131
[; ;vl53/core/vl53l0x_api_calibration.c: 1131:  Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
[e =| _Status -> ( _VL53L0X_WrByte (3 , , _Dev -> -> 0 `i `uc -> -> 0 `i `uc `c ]
"1132
[; ;vl53/core/vl53l0x_api_calibration.c: 1132:  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
[e =| _Status -> ( _VL53L0X_WrByte (3 , , _Dev -> -> 255 `i `uc -> -> 0 `i `uc `c ]
"1134
[; ;vl53/core/vl53l0x_api_calibration.c: 1134:  if (read_not_write) {
[e $ ! != -> _read_not_write `i -> 0 `i 119  ]
{
"1135
[; ;vl53/core/vl53l0x_api_calibration.c: 1135:   if (vhv_enable)
[e $ ! != -> _vhv_enable `i -> 0 `i 120  ]
"1136
[; ;vl53/core/vl53l0x_api_calibration.c: 1136:    Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
[e =| _Status -> ( _VL53L0X_RdByte (3 , , _Dev -> -> 203 `i `uc _pVhvSettings `c ]
[e :U 120 ]
"1137
[; ;vl53/core/vl53l0x_api_calibration.c: 1137:   if (phase_enable)
[e $ ! != -> _phase_enable `i -> 0 `i 121  ]
"1138
[; ;vl53/core/vl53l0x_api_calibration.c: 1138:    Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
[e =| _Status -> ( _VL53L0X_RdByte (3 , , _Dev -> -> 238 `i `uc &U _PhaseCalint `c ]
[e :U 121 ]
"1139
[; ;vl53/core/vl53l0x_api_calibration.c: 1139:  } else {
}
[e $U 122  ]
[e :U 119 ]
{
"1140
[; ;vl53/core/vl53l0x_api_calibration.c: 1140:   if (vhv_enable)
[e $ ! != -> _vhv_enable `i -> 0 `i 123  ]
"1141
[; ;vl53/core/vl53l0x_api_calibration.c: 1141:    Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
[e =| _Status -> ( _VL53L0X_WrByte (3 , , _Dev -> -> 203 `i `uc _VhvSettings `c ]
[e :U 123 ]
"1142
[; ;vl53/core/vl53l0x_api_calibration.c: 1142:   if (phase_enable)
[e $ ! != -> _phase_enable `i -> 0 `i 124  ]
"1143
[; ;vl53/core/vl53l0x_api_calibration.c: 1143:    Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
[e =| _Status -> ( _VL53L0X_UpdateByte (4 , , , _Dev -> -> 238 `i `uc -> -> 128 `i `uc _PhaseCal `c ]
[e :U 124 ]
"1144
[; ;vl53/core/vl53l0x_api_calibration.c: 1144:  }
}
[e :U 122 ]
"1146
[; ;vl53/core/vl53l0x_api_calibration.c: 1146:  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
[e =| _Status -> ( _VL53L0X_WrByte (3 , , _Dev -> -> 255 `i `uc -> -> 1 `i `uc `c ]
"1147
[; ;vl53/core/vl53l0x_api_calibration.c: 1147:  Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
[e =| _Status -> ( _VL53L0X_WrByte (3 , , _Dev -> -> 0 `i `uc -> -> 1 `i `uc `c ]
"1148
[; ;vl53/core/vl53l0x_api_calibration.c: 1148:  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
[e =| _Status -> ( _VL53L0X_WrByte (3 , , _Dev -> -> 255 `i `uc -> -> 0 `i `uc `c ]
"1150
[; ;vl53/core/vl53l0x_api_calibration.c: 1150:  *pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
[e = *U _pPhaseCal -> & -> _PhaseCalint `i -> 239 `i `uc ]
"1152
[; ;vl53/core/vl53l0x_api_calibration.c: 1152:  return Status;
[e ) _Status ]
[e $UE 118  ]
"1153
[; ;vl53/core/vl53l0x_api_calibration.c: 1153: }
[e :UE 118 ]
}
"1156
[; ;vl53/core/vl53l0x_api_calibration.c: 1156: VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
[v _VL53L0X_perform_vhv_calibration `(c ~T0 @X0 1 ef4`*S14`*uc`Cuc`Cuc ]
"1159
[; ;vl53/core/vl53l0x_api_calibration.c: 1159: {
{
[e :U _VL53L0X_perform_vhv_calibration ]
"1156
[; ;vl53/core/vl53l0x_api_calibration.c: 1156: VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
[v _Dev `*S14 ~T0 @X0 1 r1 ]
"1157
[; ;vl53/core/vl53l0x_api_calibration.c: 1157:  uint8_t *pVhvSettings, const uint8_t get_data_enable,
[v _pVhvSettings `*uc ~T0 @X0 1 r2 ]
[v _get_data_enable `Cuc ~T0 @X0 1 r3 ]
"1158
[; ;vl53/core/vl53l0x_api_calibration.c: 1158:  const uint8_t restore_config)
[v _restore_config `Cuc ~T0 @X0 1 r4 ]
"1159
[; ;vl53/core/vl53l0x_api_calibration.c: 1159: {
[f ]
"1160
[; ;vl53/core/vl53l0x_api_calibration.c: 1160:  VL53L0X_Error Status = ((VL53L0X_Error) 0);
[v _Status `c ~T0 @X0 1 a ]
[e = _Status -> -> 0 `i `c ]
"1161
[; ;vl53/core/vl53l0x_api_calibration.c: 1161:  uint8_t SequenceConfig = 0;
[v _SequenceConfig `uc ~T0 @X0 1 a ]
[e = _SequenceConfig -> -> 0 `i `uc ]
"1162
[; ;vl53/core/vl53l0x_api_calibration.c: 1162:  uint8_t VhvSettings = 0;
[v _VhvSettings `uc ~T0 @X0 1 a ]
[e = _VhvSettings -> -> 0 `i `uc ]
"1163
[; ;vl53/core/vl53l0x_api_calibration.c: 1163:  uint8_t PhaseCal = 0;
[v _PhaseCal `uc ~T0 @X0 1 a ]
[e = _PhaseCal -> -> 0 `i `uc ]
"1164
[; ;vl53/core/vl53l0x_api_calibration.c: 1164:  uint8_t PhaseCalInt = 0;
[v _PhaseCalInt `uc ~T0 @X0 1 a ]
[e = _PhaseCalInt -> -> 0 `i `uc ]
"1170
[; ;vl53/core/vl53l0x_api_calibration.c: 1170:  if (restore_config)
[e $ ! != -> _restore_config `i -> 0 `i 126  ]
"1171
[; ;vl53/core/vl53l0x_api_calibration.c: 1171:   SequenceConfig = (Dev->Data.SequenceConfig);
[e = _SequenceConfig . . *U _Dev 0 7 ]
[e :U 126 ]
"1174
[; ;vl53/core/vl53l0x_api_calibration.c: 1174:  Status = VL53L0X_WrByte(Dev, 0x0001, 0x01);
[e = _Status ( _VL53L0X_WrByte (3 , , _Dev -> -> 1 `i `uc -> -> 1 `i `uc ]
"1176
[; ;vl53/core/vl53l0x_api_calibration.c: 1176:  if (Status == ((VL53L0X_Error) 0))
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 127  ]
"1177
[; ;vl53/core/vl53l0x_api_calibration.c: 1177:   Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
[e = _Status ( _VL53L0X_perform_single_ref_calibration (2 , _Dev -> -> 64 `i `uc ]
[e :U 127 ]
"1180
[; ;vl53/core/vl53l0x_api_calibration.c: 1180:  if ((Status == ((VL53L0X_Error) 0)) && (get_data_enable == 1)) {
[e $ ! && == -> _Status `i -> -> -> 0 `i `c `i == -> _get_data_enable `i -> 1 `i 128  ]
{
"1181
[; ;vl53/core/vl53l0x_api_calibration.c: 1181:   Status = VL53L0X_ref_calibration_io(Dev, 1,
[e = _Status ( _VL53L0X_ref_calibration_io (4 , , , , , , , _Dev -> -> 1 `i `uc _VhvSettings _PhaseCal _pVhvSettings &U _PhaseCalInt -> -> 1 `i `uc -> -> 0 `i `uc ]
"1185
[; ;vl53/core/vl53l0x_api_calibration.c: 1185:  } else
}
[e $U 129  ]
[e :U 128 ]
"1186
[; ;vl53/core/vl53l0x_api_calibration.c: 1186:   *pVhvSettings = 0;
[e = *U _pVhvSettings -> -> 0 `i `uc ]
[e :U 129 ]
"1189
[; ;vl53/core/vl53l0x_api_calibration.c: 1189:  if ((Status == ((VL53L0X_Error) 0)) && restore_config) {
[e $ ! && == -> _Status `i -> -> -> 0 `i `c `i != -> _restore_config `i -> 0 `i 130  ]
{
"1191
[; ;vl53/core/vl53l0x_api_calibration.c: 1191:   Status = VL53L0X_WrByte(Dev, 0x0001,
[e = _Status ( _VL53L0X_WrByte (3 , , _Dev -> -> 1 `i `uc _SequenceConfig ]
"1193
[; ;vl53/core/vl53l0x_api_calibration.c: 1193:   if (Status == ((VL53L0X_Error) 0))
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 131  ]
"1194
[; ;vl53/core/vl53l0x_api_calibration.c: 1194:    (Dev->Data.SequenceConfig)=(SequenceConfig);
[e = . . *U _Dev 0 7 _SequenceConfig ]
[e :U 131 ]
"1196
[; ;vl53/core/vl53l0x_api_calibration.c: 1196:  }
}
[e :U 130 ]
"1198
[; ;vl53/core/vl53l0x_api_calibration.c: 1198:  return Status;
[e ) _Status ]
[e $UE 125  ]
"1199
[; ;vl53/core/vl53l0x_api_calibration.c: 1199: }
[e :UE 125 ]
}
"1201
[; ;vl53/core/vl53l0x_api_calibration.c: 1201: VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
[v _VL53L0X_perform_phase_calibration `(c ~T0 @X0 1 ef4`*S14`*uc`Cuc`Cuc ]
"1204
[; ;vl53/core/vl53l0x_api_calibration.c: 1204: {
{
[e :U _VL53L0X_perform_phase_calibration ]
"1201
[; ;vl53/core/vl53l0x_api_calibration.c: 1201: VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
[v _Dev `*S14 ~T0 @X0 1 r1 ]
"1202
[; ;vl53/core/vl53l0x_api_calibration.c: 1202:  uint8_t *pPhaseCal, const uint8_t get_data_enable,
[v _pPhaseCal `*uc ~T0 @X0 1 r2 ]
[v _get_data_enable `Cuc ~T0 @X0 1 r3 ]
"1203
[; ;vl53/core/vl53l0x_api_calibration.c: 1203:  const uint8_t restore_config)
[v _restore_config `Cuc ~T0 @X0 1 r4 ]
"1204
[; ;vl53/core/vl53l0x_api_calibration.c: 1204: {
[f ]
"1205
[; ;vl53/core/vl53l0x_api_calibration.c: 1205:  VL53L0X_Error Status = ((VL53L0X_Error) 0);
[v _Status `c ~T0 @X0 1 a ]
[e = _Status -> -> 0 `i `c ]
"1206
[; ;vl53/core/vl53l0x_api_calibration.c: 1206:  uint8_t SequenceConfig = 0;
[v _SequenceConfig `uc ~T0 @X0 1 a ]
[e = _SequenceConfig -> -> 0 `i `uc ]
"1207
[; ;vl53/core/vl53l0x_api_calibration.c: 1207:  uint8_t VhvSettings = 0;
[v _VhvSettings `uc ~T0 @X0 1 a ]
[e = _VhvSettings -> -> 0 `i `uc ]
"1208
[; ;vl53/core/vl53l0x_api_calibration.c: 1208:  uint8_t PhaseCal = 0;
[v _PhaseCal `uc ~T0 @X0 1 a ]
[e = _PhaseCal -> -> 0 `i `uc ]
"1209
[; ;vl53/core/vl53l0x_api_calibration.c: 1209:  uint8_t VhvSettingsint;
[v _VhvSettingsint `uc ~T0 @X0 1 a ]
"1215
[; ;vl53/core/vl53l0x_api_calibration.c: 1215:  if (restore_config)
[e $ ! != -> _restore_config `i -> 0 `i 133  ]
"1216
[; ;vl53/core/vl53l0x_api_calibration.c: 1216:   SequenceConfig = (Dev->Data.SequenceConfig);
[e = _SequenceConfig . . *U _Dev 0 7 ]
[e :U 133 ]
"1219
[; ;vl53/core/vl53l0x_api_calibration.c: 1219:  Status = VL53L0X_WrByte(Dev, 0x0001, 0x02);
[e = _Status ( _VL53L0X_WrByte (3 , , _Dev -> -> 1 `i `uc -> -> 2 `i `uc ]
"1221
[; ;vl53/core/vl53l0x_api_calibration.c: 1221:  if (Status == ((VL53L0X_Error) 0))
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 134  ]
"1222
[; ;vl53/core/vl53l0x_api_calibration.c: 1222:   Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
[e = _Status ( _VL53L0X_perform_single_ref_calibration (2 , _Dev -> -> 0 `i `uc ]
[e :U 134 ]
"1225
[; ;vl53/core/vl53l0x_api_calibration.c: 1225:  if ((Status == ((VL53L0X_Error) 0)) && (get_data_enable == 1)) {
[e $ ! && == -> _Status `i -> -> -> 0 `i `c `i == -> _get_data_enable `i -> 1 `i 135  ]
{
"1226
[; ;vl53/core/vl53l0x_api_calibration.c: 1226:   Status = VL53L0X_ref_calibration_io(Dev, 1,
[e = _Status ( _VL53L0X_ref_calibration_io (4 , , , , , , , _Dev -> -> 1 `i `uc _VhvSettings _PhaseCal &U _VhvSettingsint _pPhaseCal -> -> 0 `i `uc -> -> 1 `i `uc ]
"1230
[; ;vl53/core/vl53l0x_api_calibration.c: 1230:  } else
}
[e $U 136  ]
[e :U 135 ]
"1231
[; ;vl53/core/vl53l0x_api_calibration.c: 1231:   *pPhaseCal = 0;
[e = *U _pPhaseCal -> -> 0 `i `uc ]
[e :U 136 ]
"1234
[; ;vl53/core/vl53l0x_api_calibration.c: 1234:  if ((Status == ((VL53L0X_Error) 0)) && restore_config) {
[e $ ! && == -> _Status `i -> -> -> 0 `i `c `i != -> _restore_config `i -> 0 `i 137  ]
{
"1236
[; ;vl53/core/vl53l0x_api_calibration.c: 1236:   Status = VL53L0X_WrByte(Dev, 0x0001,
[e = _Status ( _VL53L0X_WrByte (3 , , _Dev -> -> 1 `i `uc _SequenceConfig ]
"1238
[; ;vl53/core/vl53l0x_api_calibration.c: 1238:   if (Status == ((VL53L0X_Error) 0))
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 138  ]
"1239
[; ;vl53/core/vl53l0x_api_calibration.c: 1239:    (Dev->Data.SequenceConfig)=(SequenceConfig);
[e = . . *U _Dev 0 7 _SequenceConfig ]
[e :U 138 ]
"1241
[; ;vl53/core/vl53l0x_api_calibration.c: 1241:  }
}
[e :U 137 ]
"1243
[; ;vl53/core/vl53l0x_api_calibration.c: 1243:  return Status;
[e ) _Status ]
[e $UE 132  ]
"1244
[; ;vl53/core/vl53l0x_api_calibration.c: 1244: }
[e :UE 132 ]
}
"1246
[; ;vl53/core/vl53l0x_api_calibration.c: 1246: VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
[v _VL53L0X_perform_ref_calibration `(c ~T0 @X0 1 ef4`*S14`*uc`*uc`uc ]
"1248
[; ;vl53/core/vl53l0x_api_calibration.c: 1248: {
{
[e :U _VL53L0X_perform_ref_calibration ]
"1246
[; ;vl53/core/vl53l0x_api_calibration.c: 1246: VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
[v _Dev `*S14 ~T0 @X0 1 r1 ]
"1247
[; ;vl53/core/vl53l0x_api_calibration.c: 1247:  uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
[v _pVhvSettings `*uc ~T0 @X0 1 r2 ]
[v _pPhaseCal `*uc ~T0 @X0 1 r3 ]
[v _get_data_enable `uc ~T0 @X0 1 r4 ]
"1248
[; ;vl53/core/vl53l0x_api_calibration.c: 1248: {
[f ]
"1249
[; ;vl53/core/vl53l0x_api_calibration.c: 1249:  VL53L0X_Error Status = ((VL53L0X_Error) 0);
[v _Status `c ~T0 @X0 1 a ]
[e = _Status -> -> 0 `i `c ]
"1250
[; ;vl53/core/vl53l0x_api_calibration.c: 1250:  uint8_t SequenceConfig = 0;
[v _SequenceConfig `uc ~T0 @X0 1 a ]
[e = _SequenceConfig -> -> 0 `i `uc ]
"1256
[; ;vl53/core/vl53l0x_api_calibration.c: 1256:  SequenceConfig = (Dev->Data.SequenceConfig);
[e = _SequenceConfig . . *U _Dev 0 7 ]
"1261
[; ;vl53/core/vl53l0x_api_calibration.c: 1261:  Status = VL53L0X_perform_vhv_calibration(
[e = _Status ( _VL53L0X_perform_vhv_calibration (4 , , , _Dev _pVhvSettings _get_data_enable -> -> 0 `i `uc ]
"1265
[; ;vl53/core/vl53l0x_api_calibration.c: 1265:  if (Status == ((VL53L0X_Error) 0))
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 140  ]
"1266
[; ;vl53/core/vl53l0x_api_calibration.c: 1266:   Status = VL53L0X_perform_phase_calibration(
[e = _Status ( _VL53L0X_perform_phase_calibration (4 , , , _Dev _pPhaseCal _get_data_enable -> -> 0 `i `uc ]
[e :U 140 ]
"1270
[; ;vl53/core/vl53l0x_api_calibration.c: 1270:  if (Status == ((VL53L0X_Error) 0)) {
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 141  ]
{
"1272
[; ;vl53/core/vl53l0x_api_calibration.c: 1272:   Status = VL53L0X_WrByte(Dev, 0x0001,
[e = _Status ( _VL53L0X_WrByte (3 , , _Dev -> -> 1 `i `uc _SequenceConfig ]
"1274
[; ;vl53/core/vl53l0x_api_calibration.c: 1274:   if (Status == ((VL53L0X_Error) 0))
[e $ ! == -> _Status `i -> -> -> 0 `i `c `i 142  ]
"1275
[; ;vl53/core/vl53l0x_api_calibration.c: 1275:    (Dev->Data.SequenceConfig)=(SequenceConfig);
[e = . . *U _Dev 0 7 _SequenceConfig ]
[e :U 142 ]
"1277
[; ;vl53/core/vl53l0x_api_calibration.c: 1277:  }
}
[e :U 141 ]
"1279
[; ;vl53/core/vl53l0x_api_calibration.c: 1279:  return Status;
[e ) _Status ]
[e $UE 139  ]
"1280
[; ;vl53/core/vl53l0x_api_calibration.c: 1280: }
[e :UE 139 ]
}
